module FIR_Filter(input clock, input [15:0] inputSignal, output [15:0] outputSignal);

	parameter numTaps=65; //the default number of taps as mentioned in lab manual 



	reg signed[15:0] coeff [numTaps-1:0]; //Note by definition number of coefficients equals numbers of taps
	reg [15:0] taps [numTaps-1:0];
	wire [31:0] addition [numTaps-1:0];

	always @(*)
	begin
	coeff[  0]=        -6;
	coeff[  1]=        -0;
	coeff[  2]=        18;
	coeff[  3]=         0;
	coeff[  4]=       -43;
	coeff[  5]=        -0;
	coeff[  6]=        87;
	coeff[  7]=         0;
	coeff[  8]=      -158;
	coeff[  9]=        -0;
	coeff[ 10]=       261;
	coeff[ 11]=         0;
	coeff[ 12]=      -403;
	coeff[ 13]=        -0;
	coeff[ 14]=       585;
	coeff[ 15]=         0;
	coeff[ 16]=      -807;
	coeff[ 17]=        -0;
	coeff[ 18]=      1061;
	coeff[ 19]=         0;
	coeff[ 20]=     -1338;
	coeff[ 21]=        -0;
	coeff[ 22]=      1620;
	coeff[ 23]=         0;
	coeff[ 24]=     -1890;
	coeff[ 25]=        -0;
	coeff[ 26]=      2127;
	coeff[ 27]=         0;
	coeff[ 28]=     -2313;
	coeff[ 29]=        -0;
	coeff[ 30]=      2431;
	coeff[ 31]=         0;
	coeff[ 32]=     30296;
	coeff[ 33]=         0;
	coeff[ 34]=      2431;
	coeff[ 35]=        -0;
	coeff[ 36]=     -2313;
	coeff[ 37]=         0;
	coeff[ 38]=      2127;
	coeff[ 39]=        -0;
	coeff[ 40]=     -1890;
	coeff[ 41]=         0;
	coeff[ 42]=      1620;
	coeff[ 43]=        -0;
	coeff[ 44]=     -1338;
	coeff[ 45]=         0;
	coeff[ 46]=      1061;
	coeff[ 47]=        -0;
	coeff[ 48]=      -807;
	coeff[ 49]=         0;
	coeff[ 50]=       585;
	coeff[ 51]=        -0;
	coeff[ 52]=      -403;
	coeff[ 53]=         0;
	coeff[ 54]=       261;
	coeff[ 55]=        -0;
	coeff[ 56]=      -158;
	coeff[ 57]=         0;
	coeff[ 58]=        87;
	coeff[ 59]=        -0;
	coeff[ 60]=       -43;
	coeff[ 61]=         0;
	coeff[ 62]=        18;
	coeff[ 63]=        -0;
	coeff[ 64]=        -6;
	end
	
	//since outside of always loop therefore need to use generate statement
	//multiplying the the tapped line by the its corresponding coefficients
	generate
	genvar i;
	for (i=0;i<numTaps;i=i+1)
		begin:multiply
		multiplier multiply(.dataa(coeff[i]),.datab(taps[i]), .result(addition[i])));	
		end
	endgenerate
	
	//creating the tapped line
	//esentially working backwards the most delayed line, is delayed from the line before that and so on...
	integer j;
	always @(posedge clock)
	begin
		for (j=numTaps-1;j>0;j=j-1)
		begin
			taps[j] = taps[j-1];
		end
		taps[0]= inputSignal; 
	
	
	end
	
	
	
	
	
	

	
	

endmodule
