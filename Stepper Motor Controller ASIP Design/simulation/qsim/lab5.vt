// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/28/2018 21:32:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_vlg_sample_tst(
	clk,
	reset_n,
	sampler_tx
);
input  clk;
input  reset_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab5_vlg_check_tst (
	GPIO_0,
	LEDG,
	stepper_signals,
	sampler_rx
);
input [3:0] GPIO_0;
input [3:0] LEDG;
input [3:0] stepper_signals;
input sampler_rx;

reg [3:0] GPIO_0_expected;
reg [3:0] LEDG_expected;
reg [3:0] stepper_signals_expected;

reg [3:0] GPIO_0_prev;
reg [3:0] LEDG_prev;
reg [3:0] stepper_signals_prev;

reg [3:0] GPIO_0_expected_prev;
reg [3:0] LEDG_expected_prev;
reg [3:0] stepper_signals_expected_prev;

reg [3:0] last_GPIO_0_exp;
reg [3:0] last_LEDG_exp;
reg [3:0] last_stepper_signals_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	GPIO_0_prev = GPIO_0;
	LEDG_prev = LEDG;
	stepper_signals_prev = stepper_signals;
end

// update expected /o prevs

always @(trigger)
begin
	GPIO_0_expected_prev = GPIO_0_expected;
	LEDG_expected_prev = LEDG_expected;
	stepper_signals_expected_prev = stepper_signals_expected;
end



// expected LEDG[3]
initial
begin
	LEDG_expected[3] = 1'bX;
end 

// expected LEDG[2]
initial
begin
	LEDG_expected[2] = 1'bX;
end 

// expected LEDG[1]
initial
begin
	LEDG_expected[1] = 1'bX;
end 

// expected LEDG[0]
initial
begin
	LEDG_expected[0] = 1'bX;
end 
// expected stepper_signals[ 3 ]
initial
begin
	stepper_signals_expected[3] = 1'bX;
end 
// expected stepper_signals[ 2 ]
initial
begin
	stepper_signals_expected[2] = 1'bX;
end 
// expected stepper_signals[ 1 ]
initial
begin
	stepper_signals_expected[1] = 1'bX;
end 
// expected stepper_signals[ 0 ]
initial
begin
	stepper_signals_expected[0] = 1'bX;
end 

// expected GPIO_0[3]
initial
begin
	GPIO_0_expected[3] = 1'bX;
end 

// expected GPIO_0[2]
initial
begin
	GPIO_0_expected[2] = 1'bX;
end 

// expected GPIO_0[1]
initial
begin
	GPIO_0_expected[1] = 1'bX;
end 

// expected GPIO_0[0]
initial
begin
	GPIO_0_expected[0] = 1'bX;
end 
// generate trigger
always @(GPIO_0_expected or GPIO_0 or LEDG_expected or LEDG or stepper_signals_expected or stepper_signals)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GPIO_0 = %b | expected LEDG = %b | expected stepper_signals = %b | ",GPIO_0_expected_prev,LEDG_expected_prev,stepper_signals_expected_prev);
	$display("| real GPIO_0 = %b | real LEDG = %b | real stepper_signals = %b | ",GPIO_0_prev,LEDG_prev,stepper_signals_prev);
`endif
	if (
		( GPIO_0_expected_prev[0] !== 1'bx ) && ( GPIO_0_prev[0] !== GPIO_0_expected_prev[0] )
		&& ((GPIO_0_expected_prev[0] !== last_GPIO_0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[0] = GPIO_0_expected_prev[0];
	end
	if (
		( GPIO_0_expected_prev[1] !== 1'bx ) && ( GPIO_0_prev[1] !== GPIO_0_expected_prev[1] )
		&& ((GPIO_0_expected_prev[1] !== last_GPIO_0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[1] = GPIO_0_expected_prev[1];
	end
	if (
		( GPIO_0_expected_prev[2] !== 1'bx ) && ( GPIO_0_prev[2] !== GPIO_0_expected_prev[2] )
		&& ((GPIO_0_expected_prev[2] !== last_GPIO_0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[2] = GPIO_0_expected_prev[2];
	end
	if (
		( GPIO_0_expected_prev[3] !== 1'bx ) && ( GPIO_0_prev[3] !== GPIO_0_expected_prev[3] )
		&& ((GPIO_0_expected_prev[3] !== last_GPIO_0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_0_exp[3] = GPIO_0_expected_prev[3];
	end
	if (
		( LEDG_expected_prev[0] !== 1'bx ) && ( LEDG_prev[0] !== LEDG_expected_prev[0] )
		&& ((LEDG_expected_prev[0] !== last_LEDG_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDG_exp[0] = LEDG_expected_prev[0];
	end
	if (
		( LEDG_expected_prev[1] !== 1'bx ) && ( LEDG_prev[1] !== LEDG_expected_prev[1] )
		&& ((LEDG_expected_prev[1] !== last_LEDG_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDG_exp[1] = LEDG_expected_prev[1];
	end
	if (
		( LEDG_expected_prev[2] !== 1'bx ) && ( LEDG_prev[2] !== LEDG_expected_prev[2] )
		&& ((LEDG_expected_prev[2] !== last_LEDG_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDG_exp[2] = LEDG_expected_prev[2];
	end
	if (
		( LEDG_expected_prev[3] !== 1'bx ) && ( LEDG_prev[3] !== LEDG_expected_prev[3] )
		&& ((LEDG_expected_prev[3] !== last_LEDG_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDG_exp[3] = LEDG_expected_prev[3];
	end
	if (
		( stepper_signals_expected_prev[0] !== 1'bx ) && ( stepper_signals_prev[0] !== stepper_signals_expected_prev[0] )
		&& ((stepper_signals_expected_prev[0] !== last_stepper_signals_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stepper_signals[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stepper_signals_expected_prev);
		$display ("     Real value = %b", stepper_signals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_stepper_signals_exp[0] = stepper_signals_expected_prev[0];
	end
	if (
		( stepper_signals_expected_prev[1] !== 1'bx ) && ( stepper_signals_prev[1] !== stepper_signals_expected_prev[1] )
		&& ((stepper_signals_expected_prev[1] !== last_stepper_signals_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stepper_signals[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stepper_signals_expected_prev);
		$display ("     Real value = %b", stepper_signals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_stepper_signals_exp[1] = stepper_signals_expected_prev[1];
	end
	if (
		( stepper_signals_expected_prev[2] !== 1'bx ) && ( stepper_signals_prev[2] !== stepper_signals_expected_prev[2] )
		&& ((stepper_signals_expected_prev[2] !== last_stepper_signals_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stepper_signals[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stepper_signals_expected_prev);
		$display ("     Real value = %b", stepper_signals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_stepper_signals_exp[2] = stepper_signals_expected_prev[2];
	end
	if (
		( stepper_signals_expected_prev[3] !== 1'bx ) && ( stepper_signals_prev[3] !== stepper_signals_expected_prev[3] )
		&& ((stepper_signals_expected_prev[3] !== last_stepper_signals_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stepper_signals[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stepper_signals_expected_prev);
		$display ("     Real value = %b", stepper_signals_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_stepper_signals_exp[3] = stepper_signals_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset_n;
// wires                                               
wire [3:0] GPIO_0;
wire [3:0] LEDG;
wire [3:0] stepper_signals;

wire sampler;                             

// assign statements (if any)                          
lab5 i1 (
// port map - connection between master ports and signals/registers   
	.GPIO_0(GPIO_0),
	.LEDG(LEDG),
	.clk(clk),
	.reset_n(reset_n),
	.stepper_signals(stepper_signals)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 

lab5_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset_n(reset_n),
	.sampler_tx(sampler)
);

lab5_vlg_check_tst tb_out(
	.GPIO_0(GPIO_0),
	.LEDG(LEDG),
	.stepper_signals(stepper_signals),
	.sampler_rx(sampler)
);
endmodule

